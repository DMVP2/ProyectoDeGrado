Tema;Palabras clave;Tipo de tema;Explicación;Asignatura;Jerarquia temática (Mapa/Arbol)
Concepto de programación;Solución, programa, interfaz, funcionalidad, lenguaje.;Teórico;Se explica y define el concepto de programación mas allá de solamente su dimensión técnica, sino tambien considerando los aspectos lógicos, metodológicos y empresariales. Igualmente esta temática funciona como elemento introductorio de la asignatura y en general de toda la línea curricular de software.;Fundamentos de programación;Concepto de programación
Qué es programar;Proceso, conjunto, instrucciones, computadora, lenguaje.;Teórico;Se explica el concepto de programar, como elemento base para luego poder explicar el concepto de programación. Se parte del hecho de que programar es un proceso, no exclusivamente ligado a la tecnología, que hace referencia a la determinación, organización e indicación de pasos, instrucciones, procesos, eventos, entre otros, teniendo un objetivo específico.;Fundamentos de programación;Qué es programar, Concepto de programación
Qué es programación;Código, compilar, lenguaje, variables, métodos.;Teoríco;Se explica el concepto de programación, como la labor o actividad de programar, caracterizandolo y delimitándolo en el contexto de la tecnología. Generalmente se establece que la programación es la acción de programar. ;Fundamentos de programación;Qué es programación, Concepto de programación
Problemas, soluciones, comprensión y especificación del problema;No, aplica;Teoríco;Se explica que es un problema, que es la solución a un problema y en que consiste especificar un problema. Igualmente se exponen los elementos que componen la especificación de un problema, al igual que el proceso a realizar.;Fundamentos de programación;Problemas, soluciones, comprensión y especificación del problema, Concepto de programación
Elementos de un programa;Funcionalidad, interfaz, algoritmo, validación, botones;Teoríco;Se enlistan, definen y caracterizan los elementos que componen un programa de computadora, al igual que se exponen las caracteristicas de un programa propiamente.;Fundamentos de programación;Elementos de un programa, Concepto de programación
Paradigmas de programación;Sucesión, instrucciones, desarrollador, programa, algoritmos.;Teoríco;Se explica el concepto de paradigma de programación, al igual que se presentan los principales paradigmas de programación, haciendo especial hincapíe en la programación orientada a objetos.;Fundamentos de programación;Paradigmas de la programación, Concepto de programación
Introducción al paradigma de programación;Estructurada, procedimental, modular, funcional, razonamiento.;Teoríco;Se introduce el concepto de paradigma de programación y las caracteristicas para que algo se denomine paradigma y no estilo de programación.;Fundamentos de programación;Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
Qué es una computadora;Máquina, software, hardware, sistema operativo, programas;Teoríco;Se define el concepto de computador, sus principales componentes, tanto de software como de hardware, y se repasa y/o redefine el concepto de programar y de programación en función del concepto de computador.;Fundamentos de programación;Conceptos y temas, Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
Qué es un lenguaje de programación;Datos, algoritmos, compilación, simbología, estructura;Teoríco;Se define que es un lenguaje de programación, cuales son sus características, como esta estructurado y la relación entre los paradigmas de programación y los lenguajes de programación.;Fundamentos de programación;Qué es un lenguaje de programación, Conceptos y temas
Tipos de lenguajes;Aplicaciones, compatibilidad, máquina, ensamblador, programación;Teoríco;"Se enumeran los tipos de lenguajes de programación, al igual que se caracterizan, diferencian y agrupan por medio de su enfoque, sus aplicaciones, paradigma, si son interpretados o compilados, y su ""nivel"", entre otras características particulares.";Fundamentos de programación;Tipos de lenguajes, Qué es un lenguaje de programación, Conceptos y temas
Compiladores e interpretes;Software, lenguaje, llamado, interpretar, traducir.;Teoríco;Se define el concepto de compilador y el concepto de intérprete, se establecen las diferentecias entre estos, y se establece la relación de estos dos conceptos con los lenguajes de programación.;Fundamentos de programación;Compiladores e interpretes, Conceptos y temas, Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
Programación orientada a objetos;Modelo, objetos, solución, simplificación, depuración.;Teoríco - Práctico;Se define, a mayor profundidad, la programación orientada a objetos (POO), listando de froma mas detallada, extensa y precisa sus caracteristicas, aplicaciones, ventajas, desventajas y particularidades. Se relaciona el concepto de la POO con el tema de: problema, solución y especificación del problema. Igualmente se especifican los principales lenguajes cuyo paradigma principal es la POO, pero teniendo como enfoque principal el lenguaje Java.;Fundamentos de programación; POO, Conceptos y temas,  Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
Qué es una clase;Conceptos, programación, especie, objetos, usuario;Teoríco - Práctico;Se explica el concepto de clase, su importancia dentro del paradigma de POO, y su relevancia frente a la especificación del mundo de un problema.;Fundamentos de programación;Qué es una clase, POO, Conceptos y temas,  Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
Qué es un objeto;Componentes, programa, simplificar, depurar, abstracto.;Teoríco - Práctico;Se explica el concepto de objeto, la relación (y derivación) con el concepto de clase, al igual que su importancia dentro del paradigma de POO.;Fundamentos de programación;Qué es un objeto, POO, Conceptos y temas,  Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
Qué es un método;Bloque, abstracción, declaración, parámetros, métodos;Teoríco - Práctico;Se explica el concepto de método (o función dependiendo de la literatura), su importancia dentro de la programación en general, su aplicación deltro de la POO, y se realiza, a modo de introducción, un simil entre el concepto en programación y el concepto en matemáticas.;Fundamentos de programación;Qué es un método, POO, Conceptos y temas,  Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
Qué es un atributo;Clases, relacionar, valor, identificador, función.;Teoríco - Práctico;Se explica el concepto de atributo, su relación con el concepto de clase y consecuentemente de objeto, y su importancia y papel dentro del paradigma de POO. Igualmente se establece la relación entre los atributos y los tipos de datos.;Fundamentos de programación;Qué es un atributo, POO, Conceptos y temas,  Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
Qué y cuales son las asociaciones;No, aplica;Teoríco - Práctico;Se define el concepto de asociación, partiendo del hecho de que este representa y modela las relaciones conceptuales entre las diferentes clases, y consecuentemente la interacción practica de las clases en un programa particularmente.;Fundamentos de programación;Qué y cuales son las asociaciones, POO, Conceptos y temas,  Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
Qué es un diagrama;Flujo, visualización, algoritmo, proceso, elementos;Teoríco - Práctico;Se plantea el concepto de diagrama, haciendo igualmente una pequeña introcucción al concepto de UML, y se establece su importancia en la Ingeniería de Software en general, y en la POO en particular. Se hace la comparación entre el diagrama de un ingeniero de software y el plano de un arquitecto. Se enlistan una serie de herramientas, gratuitas, que se pueden utilizar para el proceso de diagramación.;Fundamentos de programación;Qué es un diagrama, Conceptos y temas,  Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
Diagrama de clases;Estructura, sistema, mdelar, clases, atributos.;Teoríco - Práctico;Inicialmente, el primer diagrama que se enseña en la carrera es el diagrama de clases, especialmente porque el paradigma utilizado es el paradigma de POO. Se enlistan y explican los elementos que lo componen y la labor cada uno de estos elementos al momento del diseño.;Fundamentos de programación;Diagrama de clases, Qué es un diagrama, Conceptos y temas,  Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
Cómo estructurar un diagrama de clases;Modelo, flujo, procesos, figura, texto.;Teoríco - Práctico;Se plantea el proceso para estructurar un diagrama de clases, partiendo de su conceptualización e ideación, llegando al proceso de diagramación.;Fundamentos de programación;Cómo estructurar un diagrama de clases, Diagrama de clases, Qué es un diagrama, Conceptos y temas,  Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
Cómo leer o entender un diagrama de clases;Esquemas, clase, atributos, operaciones, métodos.;Teórico;"Se enseña a leer o entender un diagrama de clases, teniendo en cuenta que para poder leer uno de estos diagramas, igualmente se debe saber crearlo. Este tópico conecta de forma lógica con el tópico de como estructurar el diagrama principalmente porque es la dualidad entre la ""lectura"" y la ""escritura"".";Fundamentos de programación;Cómo leer o entender un diagrama de clases, Diagrama de clases, Qué es un diagrama, Conceptos y temas,  Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
Convenciones;No, aplica;Teórico;Se enlistan las convenciones y estandares utilizados en los diferentes diagramas UML en general y en el diagrama de clases en particular.;Fundamentos de programación;Convenciones, Cómo estructurar un diagrama de clases, Diagrama de clases, Qué es un diagrama, Conceptos y temas,  Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
Figuras;No, aplica;Teórico;Se enlistan las diferentes figuras (elementos gráficos) utilizadas para la construcción de un diagrama de clases. Especialmente se hace hincapíe en los elementos básicos de los diagramas de clases como lo son: las clases, las relaciones y los comentarios.;Fundamentos de programación;Figuras, Cómo estructurar un diagrama de clases, Diagrama de clases, Qué es un diagrama, Conceptos y temas,  Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
Significado de las convenciones;No, aplica;Teoríco;Se establece el significado e importancia de cada una de las convenciones utilizadas al momento de construir diagramas bajo el lenguaje UML.;Fundamentos de programación;Significado de las convenciones, Convenciones, Cómo estructurar un diagrama de clases, Diagrama de clases, Qué es un diagrama de clases, Conceptos y temas, Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
Significado de las figuras;No, aplica;Teórico;Se establece el significado de cada uno de los elementos gráficos utilizados en la construcción de los diagramas de clases.;Fundamentos de programación;Significado de las figuras, Figuras, Cómo estructurar un diagrama de clases, Diagrama de clases, Qué es un diagrama, Conceptos y temas,  Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
Tipos de datos;Variable, objeto, valor, utilidad, operaciones.;Teoríco - Práctico;Se define que es un dato, sus caracteristicas, su importancia dentro de la computación en general y dentro de la programación en particular. Igualmente se establecen los diferentes tipos de datos que existen, em función de su uso, su tamaño, su atomicidad, entre otras caracteristicas.;Fundamentos de programación;Tipos de datos, Tipos de datos, Conceptos y temas,  Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
Tamaño de los datos;byte, bits, palabras, nulo, decimal.;Teoríco - Práctico;Se relaciona cada tipo de dato visto hasta el momento con su correspondiente tamaño en memoria. Igualmente se realiza un análisis sobre la cantidad de caracteres, el rango númerico, los valores lógicos, o en general los posibles valores que puede tomar una variable según su tipo de dato.;Fundamentos de programación;Tamaños de los datos, Tipos de datos, Conceptos y temas,  Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
Tipos de datos primitivos;Datos, objeto, métodos, valor, inmutables.;Teoríco - Práctico;Se realiza una clasificación principal o básica, para agrupar aquellos datos que se consideran atómicos o fundamentales en un lenguaje de programación determinado.;Fundamentos de programación;Tipos de datos primitivos, Tipos de datos, Conceptos y temas,  Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
Tipos de datos compuestos y objetos creados (POO);No, aplica;Teoríco - Práctico;Se realiza una clasificación secundaria o derivada, para agrupar aquellos datos que se componen de los tipos de datos fundamentales de los lenguajes de programación, que pueden esta definidos por el mismo lenguaje o por el programador.;Fundamentos de programación;Compuestos y objetos creados (POO), Tipos de datos, Conceptos y temas,  Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
Cómo escoger un tipo de dato;No, aplica;Teórico;Se realiza una brevé explicación sobre los aspectos a tener en cuenta para la correcta selección de un tipo de dato en función de la intención que se tenga.;Fundamentos de programación;Cómo escoger un tipo de dato, Tipos de datos, Conceptos y temas,  Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
Constantes y variables;No, aplica;Teoríco - Práctico;Se definen los conceptos de variable y de constante, siendo estos elementos primordiales en todo el campo de la programación. Igualmente se establecen sus semejanzas y diferencias.;Fundamentos de programación;Constantes y variables, Conceptos y temas,  Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
Qué es una constante;Variable, ejecución, programa, valor, lenguaje.;Teórico;Se define de forma puntual el concepto de constante, su aplicabilidad y utilidad.;Fundamentos de programación;Qué es una constante, Conceptos y temas,  Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
Qué es una variable;Guardar, asignar, representar, mostrar, datos.;Teórico;Se define de forma puntual el concepto de variable, su aplicabilidad y utilidad.;Fundamentos de programación;Qué es una variable, Conceptos y temas,  Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
Variable local;Restringir, función, sección, interpretar, programa;Teoríco - Práctico;Se define el concepto de variable local, y se establece su importancia en cuanto a la creación de funciones/métodos.;Fundamentos de programación;Variable local, Qué es una variable, Conceptos y temas,  Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
Variable global;Definir, función, principio, biblioteca, archivos.;Teoríco - Práctico;Se define el concepto de variable global, se establece su importancia en cuanto a la creación de clases, módulos o componentes.;Fundamentos de programación;Variable global,  Qué es una variable, Conceptos y temas,  Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
Operadores;Símbolos, representar, números, elementos, valores.;Teoríco - Práctico;Se enlistan los diferentes tipos de operadores que existen en el lenguaje de programación Java: arítméticos, lógicos, de cadenas de texto, de asignación o relacionales. Se ejemplifica su uso básico y se plantean diferentes alternativas de aplicación.;Fundamentos de programación;Operadores, Conceptos y temas,  Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
Operadores aritméticos;No, aplica;Teoríco - Práctico;Se presentan los diferentes operadores aritméticos, y se ejemplifica su uso.;Fundamentos de programación;Aritméticos, Operadores, Conceptos y temas,  Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
Operadores lógicos;Expresiones, binarios, valores, resultado, matriz.;Teoríco - Práctico;Se presentan los diferentes operadores lógicos, y se ejemplifica su uso.;Fundamentos de programación;Lógicos, Operadores, Conceptos y temas,  Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
Operadores relacionales;Elemento, expresión, valores, programa, cambio.;Teoríco - Práctico;Se presentan los diferentes operadores relacionales, y se ejemplifica su uso. Igualmente se establece la importancia de estos principalmente por su aplicación en los condicionales (y las diferentes estructuras que hacen uso de los condicionales);Fundamentos de programación;Relacionales, Operadores, Conceptos y temas,  Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
Operadores de asignación;Aritmética, tabla, simple, compuesta, desplazamiento.;Teoríco - Práctico;Se presentan los diferentes operadores de asignación, y se ejemplifica su uso.;Fundamentos de programación;Asignación, Operadores, Conceptos y temas,  Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
Operadores de cadenas de texto;Constantes, concatenar, funciones, caracteres, secuencias.;Teoríco - Práctico;Se presentan los diferentes operadores para cadenas de texto, y se ejemplifica su uso.;Fundamentos de programación;De cadenas de texto, Operadores, Conceptos y temas,  Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
Estructura de control;Modificar, flujo, ejecución, instrucciones, programa.;Teoríco - Práctico;Se presentan las estructuras de control, siendo estas, uno de los conceptos mas importantes en practicamente todo lenguaje de programación. Igualmente se realiza la diferenciación, o clasificación, entre las estructuras repetitivas y las estructuras de selección.;Fundamentos de programación;Estructuras de control, Conceptos y temas,  Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
Estructura repetitivas;Repetir, declarar, bloque, sentencias, instrucciones.;Teoríco - Práctico;Se presentan y enlistan las estructuras repetitivas. Se establecen las diferentes aplicaciones que pueden tener las estructuras repetitivas: recorrer estructuras de datos, iterar sobre tareas, procesos u operaciones, entre otros.;Fundamentos de programación;Estructuras repetitivas, Estructuras de control, Conceptos y temas,  Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
Estructuras de selección;Condición, expresión, decisión, conjunto, instrucciones.;Teoríco - Práctico;Se presentan y enlistan las estructuras de selección. Se establecen las diferentes aplicaciones que pueden tener las estructuras de selección: control de flujo, alternar entre tareas, procesos u operaciones, entre otros.;Fundamentos de programación;Estructuras de selección, Estructuras de control, Conceptos y temas,  Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
For;Repetir, instrucciones, ocasiones, vectores, matrices.;Teoríco - Práctico;Se presenta el bucle for como aquella estructura que se utilizada cuando se quiere repetir un conjunto de instrucciones un número finito (determinado) de veces previamente conocido.;Fundamentos de programación;For, Estructuras repetitivas, Estructuras de control, Conceptos y temas,  Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
For each;Estructura, control, acciones, elementos, datos, ;Teoríco - Práctico;Se presenta el bucle for each como aquella estructura que se utiliza cuando se quiere realizar un recorrido sobre todos los elementos de una colección.;Fundamentos de programación;For each, Estructuras repetitivas, Estructuras de control, Conceptos y temas,  Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
While;Iteración, estructura, sentencia, control, valor.;Teoríco - Práctico;Se presenta el bucle while como aquella estructura que se utiliza cuando se quiere iterar sobre un bloque de código mientras una condición tiene el valor true, teniendo a la condición previa al bloque de código.;Fundamentos de programación;While, Estructuras repetitivas, Estructuras de control, Conceptos y temas,  Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
Do while;Bucle, ejecución, sentencia, condición, iteración.;Teoríco - Práctico;Se presenta el bucle do while como aquella estructura que se utiliza cuando se quiere iterar sobre un bloque de código mientras una condición tiene el valor true, teniendo a la condición posterior al bloque de código.;Fundamentos de programación;Do while, Estructuras repetitivas, Estructuras de control, Conceptos y temas,  Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
Loop;Proceso, sistema, estructura circular, inicio, final;Teoríco - Práctico;Se presenta la existencia de una estructura repetitiva especial, existente en algunas versiones específicas de algunos lenguajes de programación, como aquella estructura que permite realizar una cantidad infinita de veces.;Fundamentos de programación;Loop, Estructuras repetitivas, Estructuras de control, Conceptos y temas,  Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
If;Sentencia, expresión condicional, código, instrucciones, condicion.;Teoríco - Práctico;Se plantea el if como la primera y mas básica estructura de selección, cuya condición es previamente definible por el programador, y que se usa para tomar decisiones, este evaluá básicamente una operación lógica, es decir una expresión que de como resultado True o False , y ejecuta la pieza de código siguiente siempre y cuando el resultado sea verdadero.;Fundamentos de programación;If, Estructuras de selección, Estructuras de control, Conceptos y temas,  Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
Definición de condición;Instrucción, ejecución, función, valor, excepción.;Teórico;Se define el concepto de condición como una afirmación que puede tomar un valor verdadero o falso y que es utilizado por practicamente todas las estructuras de control (en algunos casos de forma explícita y en otros de forma implícita).;Fundamentos de programación;Definición de condición, If, Estructuras de selección, Estructuras de control, Conceptos y temas,  Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
Switch;No, aplica;Teoríco - Práctico;Se plantea el switch como una estructura de selección mas compleja, pero a su vez eficiente según sea el caso. Usar switch ayuda a simplificar el código y evita confusiones, ya que organiza en varias ramas el código que va a ser ejecutado. Esta estructura se utiliza para cuando tenemos decisiones múltiples, es lo equivalente hacer múltiples if else anidados.;Fundamentos de programación;Swich, Estructuras de selección, Estructuras de control, Conceptos y temas,  Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
If - Else if - .... -Else;Condición, combinación, operadores, bloque, agrupar.;Teoríco - Práctico;"Se plantea el if - else if - ... - else como una ""evolución"" del if simple o ""normal"" que permite validar mas de una condición hasta el momento en que se cumpla una.";Fundamentos de programación;If - Else if - ... - Else, If, Estructuras de selección, Estructuras de control, Conceptos y temas,  Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
If anidado;Valores, variables, instrucción, ejecución, código.;Teoríco - Práctico;"Se plantea el if anidado es una sentencia if que esta dentro de otro if o else. Basicamente es como utilizar una sentencia if simple o ""compuesta"" dentro de otra estructura igual (y así sucesivamente).";Fundamentos de programación;If anidado, If, Estructuras de selección, Estructuras de control, Conceptos y temas,  Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
Estructuras contenedoras;Información, algoritmos, iterador, algoritmo, vector.;Teoríco - Práctico;Se definen las estructuras contenedoras como aquellas estructuras que permiten almacenar y recuperar datos en un orden determinado sin importar su contenido.;Fundamentos de programación;Estructuras contenedoras, Conceptos y temas,  Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
Una dimensión (Lineal);Procedimiento, algoritmo, restricciones, optimizar, variables.;Teoríco - Práctico;Se establece un primer acercamiento a las estructuras contenedoras por medio de los arreglos o listas unidimensionales, es decir, aquellas donde cada posición es un elemento concreto.;Fundamentos de programación;Una dimensión (Lineal), Estructuras contenedoras, Conceptos y temas,  Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
Dos dimensiones (Matricial);Matriz, elemento, estructura, problema, atributo.;Teoríco - Práctico;Se establece un nuevo acercamiento a las estructuras contenedoras por medio de los arreglos o listas de dos dimensiones (bidimensionales), es decir, aquellas donde cada posición es a su vez un arreglo o lista de una dimensión.;Fundamentos de programación;Dos dimensiones (Matricial), Estructuras contenedoras, Conceptos y temas,  Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
Tamaño fijo;Array, datos, almacenar, lenguaje programación, valores.;Teoríco - Práctico;"Se define el concepto de ""estructura contenedora de tamaño fijo"", que, en el lenguaje de programación Java, toma el nombre puntual de arreglo.";Fundamentos de programación;Tamaño fijo, Una dimensión (Lineal), Estructuras contenedoras, Conceptos y temas,  Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
Tamaño variable;No, aplica;Teoríco - Práctico;"Se define el concepto de ""estructura contenedora de tamaño variable"", que, en el lenguaje de programación Java, toma el nombre puntual de ArrayList.";Fundamentos de programación;Tamaño variable, Una dimensión (Lineal), Estructuras contenedoras, Conceptos y temas,  Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
Excepciones;Error, funcionalidad, método, objeto, representar.;Teoríco - Práctico;Se introduce el concepto de excepción, como aquella estructura que permite gestionar o controlar los errores que, sabiendo de antemano que pueden suceder en tiempo de ejecución, no son evitables propiamente.;Fundamentos de programación;Excepciones, Conceptos y temas,  Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
Qué es una excepción;Indicación, programa, método, ejecución, objeto.;Teórico;Se definen las excepciones como una estructura de control de flujo en tiempo de ejecución que permite manejar los posibles errores que se puedan cometer, ya sea por los algoritmos, o por las entradas y/o acciónes del usurio final.;Fundamentos de programación;Qué es una excepción, Excepciones, Conceptos y temas,  Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
Tipos de excepciones;Ejecuión, duración, problemas, recuperar, cadena.;Teórico;Se enlistan los diferentes tipos de excepciones que existen, tanto conceptualmente en general (e.g. errores lógicos, errores aritméticos, entre otros), como en el lenguaje de programación Java en particular (excepciones en tiempos de ejecución y excepciones de entrada y salida (I/O).;Fundamentos de programación;Tipos de excepciones, Excepciones, Conceptos y temas,  Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
Try - Catch;Declaración, bloque, instrucción, respuesta, excepción.;Teoríco - Práctico;Se define el try - chatch como aquella declaración que señala un bloque de instrucciones a intentar (try), y especifica una respuesta si se produce una excepción (catch).;Fundamentos de programación;Try - Catch, Excepciones, Conceptos y temas,  Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
Cómo identificar excepciones;Situación, excepción, control, acciones, método.;Teórico;"Al momento de enlistar los diferentes tipos de excepciones que pueden ocurrir, se expone tambien la forma de poderlas identificar. Se comienza por descartar los casos mas comunes, luego se analizan otras posibilidades y finalmente se aplican los bloques try - catch que el mismo IDE puede ""sugerir"".";Fundamentos de programación;Cómo identificar excepciones, Qué es una excepción, Excepciones, Conceptos y temas,  Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
Concepto de persistencia;Guardar, sistema, información, recuperar, atributos.;Teórico;Se define el concepto de persistencia como la acción de preservar la información de forma permanente (guardado), pero a su vez también se refiere a poder recuperar dicha información (lectura) para que pueda ser nuevamente utilizada.;Fundamentos de programación - Programación uno;Concepto de persistencia, Persistencia, Conceptos y temas,  Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
Tipos de persistencia;Procesos, concurrencia, objetos, control, acciones.;Teórico;Se enlistan y explican los principales tipos de persistencia existentes, entre los que se encuentran principalmente la persistencia mediante archivos de texto plano, la serialización y las bases de datos.;Fundamentos de programación - Programación uno;Tipos de persistencia, Concepto de persistencia, Persistencia, Conceptos y temas,  Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
Manejo de archivos de texto plano;Formato, interpretar, datos, procesar, información.;Teoríco - Práctico;Se introduce la técnica o procedimiento para trabajar con archivos de texto plano. En general esto hace referencia a dos acciones principales sobre este tipo de archivos: lectura y escritura.;Fundamentos de programación - Programación uno;Manejo de archivos de texto plano, Concepto de persistencia, Persistencia, Conceptos y temas,  Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
Lectura;Funciones, cadenas, biblioteca, programa, transferencia.;Teoríco - Práctico;Se explica el proceso para realizar la lectura de archivos de texto plano (carga de información), a través de la presentación de la función o método en Java que realiza dicha operación.;Fundamentos de programación - Programación uno;Lectura, Manejo de archivos de texto plano, Concepto de persistencia, Persistencia, Conceptos y temas,  Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
Escritura;Cadenas, transferencia, formato, variable, sintaxis.;Teoríco - Práctico;Se explica el proceso para realizar la escritura sobre archivos de texto plano (almacenamiento de información), a través de la presentación de la función o método en Java que realiza dicha operación.;Fundamentos de programación - Programación uno;Escritura, Manejo de archivos de texto plano, Concepto de persistencia, Persistencia, Conceptos y temas,  Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
Requerimientos ;Necesidad, funcionalidad, software, problemas, objetivos.;Teoríco - Práctico;Se introduce el concepto de requerimientos como la descripción de los servicios, operaciones, funcionalidades y restricciones de un sistema de software, es decir, lo que el software debe hacer y bajo qué circunstancias (como) debe hacerlo.;Fundamentos de programación - Programación uno;Requerimientos, Conceptos y temas,  Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
Identificación de requerimientos;Técnica, escenario, ayudar, funciones, características.;Teoríco - Práctico;"Se exponen los diferentes métodos, procedimientos y ""tips"" para poder identificar y extraer requerimientos ya sea de un enunciado textual o de la conversación con un beneficiario/cliente.";Fundamentos de programación - Programación uno;Identificación de requerimientos, Requerimientos, Conceptos y temas,  Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
Análisis de requerimientos;Limitación, problemas, desarrollo, sistema, proyecto.;Teoríco - Práctico;Se exponen los diferentes métodos para el análisis de requerimientos, y las caracteristicas y/o datos a considerar y extraer de estos. Igualmente se presenta el formato de especificación de requerimientos como el medio para estandarizar y documentar el análisis de requerimientos.;Fundamentos de programación - Programación uno;Análisis de requerimientos, Requerimientos, Conceptos y temas,  Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
Documentación;Código, información, explicar, ordenar, identificar.;Teoríco - Práctico;Se define la documentación como uno de los aspectos fundamentales del proceso de desarrollo de software. Siendo esta la forma de la comunicación de detalles, estructura y caracteristicas del software entre los desarrolladores.;Fundamentos de programación - Programación uno;Documentación, Conceptos y temas,  Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
Cómo se documenta;Método, variable, algoritmo, contenido, inicio.;Teórico;"Se exponen los diferentes métodos, procedimientos y ""tips"" para la documentación del código en general y en el lenguaje de programación Java en particular.";Fundamentos de programación;Cómo se documenta, Documentación, Conceptos y temas,  Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
Para que sirve la documentación;No, aplica;Teórico;Se presenta la utilidad e importancia de una correcta y completa documentación del código durante el proceso de desarrollo de software.;Fundamentos de programación;Para que sirve la documentación, Documentación, Conceptos y temas,  Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
Comentarios;No, aplica;Teoríco - Práctico;Se exponen los comentarios como un elemento particular pero principal de la documentación de código en todo lenguaje de programación. En específico se pueden entender los comentarios como aquellas líneas de código fuente que el compilador ignora.;Fundamentos de programación;Comentarios, Cómo se documenta, Documentación, Conceptos y temas,  Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
JavaDOC;Proyecto, mantenimiento, detalles, programador, implementación.;Teoríco - Práctico;Se presenta JavaDOC como el estandar y a herramienta para la creación y exportación de la documentación del código en el lenguaje de programación Java.;Fundamentos de programación;JavaDOC, Cómo se documenta, Documentación, Conceptos y temas,  Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
Importancia de la documentación;No, aplica;Teórico;Se define el proceso con el se conoce toda la parte documental y procesos internos que se encuentran en el codigo.;Fundamentos de programación;Importancia, Para que sirve la documentación, Documentación, Conceptos y temas,  Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
Interacción usuario - computador;No, aplica;Teoríco - Práctico;Se presenta el la utilidad y el manejo que posee el usuario al iteractuar con un equipo pc.;Fundamentos de programación - Programación uno;Interacción usuario - computador, Conceptos y temas,  Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
Console;Componentes, terminales, funcionamiento, ejecución, interfaz.;Teoríco - Práctico;Se define la consola como la herramienta que hace parte del sistema con el que el usuario por medio de comandos por medio de comandos puede interactuar con el equipo pc.;Fundamentos de programación;Console, Interacción usuario - computador, Conceptos y temas,  Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
GUI;Interfaz, información, acciones, usuario, sistemas operativos.;Teoríco - Práctico;Se define la interfaz gráfica de usuario (GUI) como la interfaz grafica con la que el usuario puede interactuar.;Fundamentos de programación - Programación uno;Gui, Interacción usuario - computador, Conceptos y temas,  Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
Qué es MVC;Arquitectura, software, capas, desarrollar, lenguaje.;Teoríco - Práctico;Se presenta MVC como el patron de arquitectura de software (Modelo,Vista,Controlador) donde se divide principalmente el modelo del negocio.;Fundamentos de programación - Programación uno;Qué es MVC, MVC, Conceptos y temas,  Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
Modelo;Lenguaje, sintaxis, restricciones, clases, atributos.;Teoríco - Práctico;"Se presenta de forma puntual la capa de ""modelo"" del estilo MVC, como aquella capa destinada a la lógica de un aplicativo.";Fundamentos de programación - Programación uno;Modelo, Qué es MVC, MVC, Conceptos y temas,  Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
Vista;Interfaz, información, mecanismo, interacción, datos.;Teoríco - Práctico;"Se presenta de forma puntual la capa de ""vista"" del estilo MVC, como aquella capa destinada a la presentación de un aplicativo (Interfaz de Usuario - Interfaz Gráfica de Usuario).";Fundamentos de programación - Programación uno;Vista, Qué es MVC, MVC, Conceptos y temas,  Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
Controlador;Intermediario, gestión, flujo, información, transformación.;Teoríco - Práctico;"Se presenta de forma puntual la capa de ""controlador"" del estilo MVC, como aquella capa destinada al control de flujo de ejecución de un aplicativo y a la gestión de eventos (acciones internas del aplicativo o generadas por el usuario).";Fundamentos de programación - Programación uno;Controlador, Qué es MVC, MVC, Conceptos y temas, Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
Para que sirve MVC;Arquitectura, software, datos, aplicación, lógica.;Teórico;Se explica que el estilo arquitectural MVC permite dividir la lógica, los datos y las funciones de un aplicativo de la presentación de los resultados y la interacción del usuario final con el mismo.;Fundamentos de programación - Programación uno;Para que sirve MVC, Qué es MVC, MVC, Conceptos y temas,  Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
Como estructurar un programa mediante MVC;No, aplica;Teórico;Se exponen los diferentes métodos y procedimientos para el desarrollo de un aplicativo mediante la arquitectura MVC, al igual que se expone lo que se puede y lo que no se puede hacer al momento de utilizar este estilo arquitectural (especialmente por factores como buenas practicas de desarrollo o el simple hecho de que no se este utilizando un estilo arquitectural diferente).;Fundamentos de programación;Como estructurar un programa mediante MVC, Para que sirve MVC, Qué es MVC, MVC, Conceptos y temas,  Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
POO y MVC;No, aplica;Teoríco - Práctico;Se presenta la relación que existe entre el paradigma POO y el estilo arquitectural MVC, especialmente puesto que las caracteristicas y la lógica misma de la POO permite cumplir con la idea y filosofía del MVC.;Fundamentos de programación;POO y MVC, Para que sirve MVC, Qué es MVC, MVC, Conceptos y temas,  Introducción al paradigma POO, Paradigmas de la programación, Concepto de programación
Traducción de requerimientos;Restricción, modelo, diccionario, flujo, funcionalidades.;Teoríco - Práctico;"Se enseña a ""traducir"" los requerimientos en operaciones, caracteristicas o elementos de un producto de software, es decir convertir una ""idea"" netamente conceptual en un componente de un aplicativo.";Programación uno;Traducción de requerimientos, Requerimientos, Conceptos y temas
Métodos de identificación de requerimientos;No, aplica;Teoríco - Práctico;"Se exponen los diferentes métodos, procedimientos y ""tips"" para poder identificar y extraer requerimientos ya sea de un enunciado textual o de la conversación con un beneficiario/cliente. Igualmente se establecen las herramientas ingenieriles para una correcta ingeniería de requerimientos.";Programación uno;Métodos de identificación de requerimientos, Identificación de requerimientos, Requerimientos, Conceptos y temas
Diagramas UML;Esquemas, representar, software, programación, procesos.;Teoríco - Práctico;Se define diagramas UML para el modelamiento del software y la creación de la arquitectura de este. UML se puede entender como una técnica y herramienta para la especificación sistemas en todas sus fases siendo un lenguaje visual para especificar, construir y documentar los artefactos de los sistemas.;Programación uno;Diagramas UML, Conceptos y temas
Para que sirven los diagramas;No, aplica;Teórico;Se expone el uso e importancia de los diagramas UML dentro del proceso de desarrollo de software como aquel lenguaje y herramienta que permite diseñar el artefacto desde una perspectiva lógica, conceptual y documental, al igual que estandarizar la comprensión de este desde diferentes enfoques.;Programación uno;Para que sirven los diagramas, Diagramas UML, Conceptos y temas
UML;Representación, esquemas, software, desarrollo, planificación.;Teoríco - Práctico;Se define UML como aquel estándar que se ha adoptado a nivel internacional por numerosos organismos y empresas para crear esquemas, diagramas y documentación relativa a los desarrollos de software.;Programación uno;UML, Diagramas UML, Conceptos y temas
Tipos de diagramas;Casos de uso, clases, secuencia, arquitectura, objetos.;Teórico;Se plantea tipos de diagramas que establece UML para las fases de diseño y planeación del ciclo de desarrollo de software. Igualmente se expone la utilidad particular de cada tipo de diagrama considerando que cada uno esta destinado a presentar, especificar y documentar una perspectiva distinta del artefacto.;Programación uno;Tipos de diagramas, Diagramas UML, Conceptos y temas
Relación: Requerimientos - Diagramas - Código;No, aplica;Teórico;Se define relación entre: Requerimientos, diagramas, código como el flujo lógico entre identificar, extraer y analizar los requerimientos, para luego construir una serie de diagramas, y que finalmente serán traducidos a un artefacto final mediante un proceso de construcción, el cual incluye la codficación.;Programación uno;Relación: Requerimientos - Diagramas - Código, Diagramas UML, Conceptos y temas
Casos de uso;Actores, roles, funcionalidades, procesos, software.;Teoríco - Práctico;Se define casos de uso como la descripción de las actividades que alguien o algo debería hacer.;Programación uno;Casos de uso, Tipos de diagramas, Diagramas UML, Conceptos y temas
Estándares en la documentación;No, aplica;Teórico;Se plantean los estandares de documentación de código fuente en terminos de orden, convenciones, idiomas, buenas practicas y presentación.;Programación uno;Estándares en la documentación, Documentación, Conceptos y temas
Buenas prácticas de documentación;No, aplica;Teórico;Se definen las buenas practicas en la documentación de código a la correcta aplicación de estandares y convenciones al momento de la generación de comentarios o de la utilización de herramientas para documentación tales como JavaDOC o PHPDOC. Igualmente se refiere a la forma en la que se redacta un comentario y a que principalmente se utilice como idioma el ingles o el idioma de la región donde se va a desplegar el código.;Programación uno;Buenas prácticas de documentación, Estándares en la documentación, Documentación, Conceptos y temas
Asignación de responsabilidades;Constructores, modificadores, analizadores, objetos, responsabilidad.;Teoríco - Práctico;Se definen las responsabilidades como las obligaciones o contratos de una clase. Estas se pueden clasificar en dos grandes grupos: La responsabilidad de conocer una información y la responsabilidad de hacer alguna acción. Consecuentemente, se define la asignación de responsabilidades como los mecanismos, estandares o técnicas para determinar y asignar aecuadamente las responsabilidades de una clase particular.;Programación uno;Asignación de responsabilidades, Conceptos y temas
GRASP;Proceso, ejecución, proyecto, riesgos, dependencias.;Teoríco - Práctico;"Se define GRASP como patrones de software para asignación de responsabilidades, siendo GRASP el acrónimo de ""object-oriented design General Responsibility Assignment Software Patterns"". Aunque se considera que más que patrones propiamente dichos, son una serie de buenas prácticas en el diseño de software que se desarrolle bajo el paradigma orientado a objetos. Los patrones GRASP generalmente nacen como la respuesta a una pregunta puntual.";Programación uno;GRASP, Qué es una responsabilidad, Asignación de responsabilidades, Conceptos y temas
Experto;No, aplica;Teoríco - Práctico;El patrón experto responde a la pregunta: ¿Quién es responsable? Indica que la responsabilidad de la creación de un objeto o la implementación de un método, debe recaer sobre la clase que conoce toda la información necesaria para crear aquel objeto o desarrollar dicho método.;Programación uno;Experto, GRASP, Qué es una responsabilidad, Asignación de responsabilidades, Conceptos y temas
Creador;No, aplica;Teoríco - Práctico;El patrón creador responde a la pregunta: ¿Quién crea? Ayuda a identificar quién debe ser el responsable de la creación (o instanciación) de nuevos objetos o clases. ;Programación uno;Creador, GRASP, Qué es una responsabilidad, Asignación de responsabilidades, Conceptos y temas
Controlador;No, aplica;Teoríco - Práctico;El patrón controlador responde a la pregunta: ¿Quién maneja los eventos de  un sistema? Es un patrón que sirve como intermediario entre una determinada interfaz y el algoritmo que la implementa, de tal forma que es la que recibe los datos del usuario y la que los envía a las distintas clases según el método llamado. Este patrón permite asignar la responsabilidad de controlar el flujo de eventos del sistema, a clases específicas. Igualmente, este patrón es el principal pat´ron GRASP utilizado en el estilo arquitectural MVC.;Programación uno;Controlador, GRASP, Qué es una responsabilidad, Asignación de responsabilidades, Conceptos y temas
Alta cohesión;No, aplica;Teoríco - Práctico;El patrón de alta cohesión responde a la pregunta: ¿Cómo mantener una complejidad manejable? Permite que cada elemento de nuestro diseño debe realizar una labor única dentro dl sistema, no desempeñada por el resto de los elementos y que sea auto-identificable. Basicamente dice que dice que la información que almacena una clase debe ser coherente y debe estar (en la medida de lo posible) relacionada con la clase.;Programación uno;Alta cohesión. GRASP, Qué es una responsabilidad, Asignación de responsabilidades, Conceptos y temas
Bajo acoplamiento;No, aplica;Teoríco - Práctico;El patrón de bajo acoplamiento responde a la pregunta: ¿Cómo soportar baja dependencia e incremento de la reutilización? Es la idea de tener las clases lo menos ligadas entre sí que se pueda. De tal forma que en caso de producirse una modificación en alguna de ellas, se tenga la mínima repercusión posible en el resto de clases, potenciando la reutilización, y disminuyendo la dependencia entre las clases.;Programación uno;Bajo acoplamiento, GRASP, Qué es una responsabilidad, Asignación de responsabilidades, Conceptos y temas
Ley de Demeter;No, aplica;Teoríco - Práctico;"El patrón de ley de Demeter responde a la pregunta: ¿Cómo evitar tener conocimiento de la estructura de objetos indirectos? Tambien reconocido mediante la frase ""no aceptes caramelos de desconocidos"" la ley de Demeter básicamente es un mecanismo y patrón de asignación de responsabilidades de detección de acoplamiento que viene a decir que un objeto no debería conocer las entrañas de otros objetos con los que interactúa.";Programación uno;Ley de Demeter, GRASP, Qué es una responsabilidad, Asignación de responsabilidades, Conceptos y temas
Indirección;No, aplica;Teoríco - Práctico;El patrón de indirección responde a la pregunta: ¿Cómo evitar el acoplamiento directo? Aporta bajar el acoplamiento entre dos clases asignando la responsabilidad de la mediación entre ellos a un tercer elemento (clase) intermedio. En general busca crear clases intermedias para desacoplar clientes de servicio y servicios.;Programación uno;Indirección, GRASP, Qué es una responsabilidad, Asignación de responsabilidades, Conceptos y temas
Variaciones protegidas;No, aplica;Teoríco - Práctico;El patrón de variaciones protegidas busca el principio fundamental de protegerse del cambio, de tal forma que todo lo que se prevea en un análisis previo que es susceptible de modificaciones, se envuelva en una interfaz, utilizando el polimorfismo para crear varias implementaciones y posibilitar implementaciones futuras, de manera que quede lo menos ligado posible al sistema, de forma que cuando se produzca la variación, repercuta lo mínimo.;Programación uno;Variaciones protegidas, GRASP, Qué es una responsabilidad, Asignación de responsabilidades, Conceptos y temas
Fabricación pura;No, aplica;Teoríco - Práctico;El patrón de fabricación pura responde a la pregunta: ¿Cómo en ocasiones se puede no violar la alta cohesión y bajo acoplamiento? La fabricación pura se da en las clases que no representan un ente u objeto real del dominio del problema, sino que se ha creado intencionadamente para disminuir el acoplamiento, aumentar la cohesión y/o potenciar la reutilización del código. En general se utiliza cuando los problemas se complican, porque se busca construir clases que se encarguen de construir los objetos adecuados en cada momento (factorías).;Programación uno;Fabricación pura, GRASP, Qué es una responsabilidad, Asignación de responsabilidades, Conceptos y temas
Aproximación UEB al MVC;No, aplica;Teoríco - Práctico;Se explica la aproximación particular que se utiliza en la Universidad El Bosque para la implementación del estilo arquitectural MVC.;Programación uno;Aproximación UEB, MVC, Conceptos y temas
Archivos de texto plano;No, aplica;Teoríco - Práctico;Se explica el procedimiento y los factores a considerar para la implementación de la persistencia por medio de archivos de texto plano. Se hace especial enfasis en la gestión de archivos de texto plano, al igual que en su lectura y escritura.;Programación uno;Archivos de texto plano, Persistencia, Conceptos y temas
Archivos de propiedades;No, aplica;Teoríco - Práctico;Se explica el procedimiento y los factores a considerar para la implementación de la persistencia por medio de archivos de propiedades facilitados por la clase Properties de Java. Esta clase permite manipular archivos que almacenen de manera permanente una serie de valores emparejados cada uno de ellos a un nombre, de manera similar a los nombre de variables que almacenan valores en memoria.;Programación uno;Archivos de propiedades, Persistencia, Conceptos y temas
Serialización;No, aplica;Teoríco - Práctico;Se explica la serialización como el proceso de convertir un objeto en una secuencia de bytes para almacenarlo o transmitirlo a la memoria, a una base de datos o a un archivo. Su propósito principal es guardar el estado de un objeto para poder volver a crearlo cuando sea necesario.;Programación uno;Serialización, Persistencia, Conceptos y temas
Deserialización;No, aplica;Teoríco - Práctico;Se explica la deserialización como el proceso opuesto a la serialización en donde se reconstruye el objeto a partir de la información, donde su objetivo es transformar los datos serializados provenientes de un archivo, secuencia o socket de red en un objeto.;Programación uno;Deserialización, Persistencia, Conceptos y temas
Pruebas de software;No, aplica;Teoríco - Práctico;Se define y explica el concepto de pruebas de software, al igual que se introduce este por medio del estudio de casos o ejemplos. Se definen pruebas de software como el proceso de evaluación, validación y verificación de un producto o aplicación de software para saber si hace lo que se supone que debe hacer y que lo hace como estaba planteado y/o pactado. Los beneficios de las pruebas incluyen la prevención de errores, la reducción de los costos de desarrollo y la mejora del rendimiento.;Programación uno;Pruebas de software, Conceptos y temas
Debug;No, aplica;Teoríco - Práctico;Siendo la traducción literal de depurar o depuración. Se define al debug como el proceso de buscar errores o bugs en el código, la lógica o la implementación tecnológica de un programa, de tal forma que se puedan corregir y así evitar posteriores fallos de funcionamiento. El proceso de debug igualmente permite mejorar el rendimiento de un producto de software.;Programación uno;Debug, Pruebas de software, Conceptos y temas
Unitarias;No, aplica;Teoríco - Práctico;Se definen las pruebas unitarias como aquellas pruebas que consisten en aislar una parte del código y comprobar que funciona a la perfección. Son pequeños tests que validan el comportamiento de un objeto y la lógica.;Programación uno;Unitarias, Pruebas, Pruebas de software,  Conceptos y temas
Invariantes;No, aplica;Teoríco - Práctico;Se definen las pruebas invariantes (o pruebas de invariantes) como la utilización de invariantes para verificar el correcto funcionamiento de una función y/o algoritmo. Un invariantes es un valor o condición que se espera que sea consistente durante la ejecución de un proceso. Las invariantes son útiles para probar los resultados de algoritmos y la integridad de los programas de computadora.;Programación uno;Invariantes, Pruebas, Pruebas de software,  Conceptos y temas
Cómo hacer un debug;No, aplica;Teoríco - Práctico;Se explica el proceso, y se enlistan las consideraciones a tener en cuenta para poder desarrollar de forma satisfactoria un debug en un programa informático. Igualmente se presenta la forma de realizar un debug para un programa desarrollado en Java a través del entorno integrado de desarrollo Eclipse.;Programación uno;Cómo hacer un debug, Qué es un debug, Debug, Pruebas de software, Conceptos y temas
Abstracción;No, aplica;Teoríco - Práctico;Se define el concepto de abstracción como la acción que consiste en aislar un elemento de su contexto o del resto de los elementos que lo acompañan. Especificamente poder aislar o separar aquellas características especificas de un objeto, aquellas que lo distinguen de los demás tipos de objetos y que logran definir límites conceptuales respecto a quien está haciendo dicha abstracción del objeto.;Programación uno;Abstracción, Nuevos tópicos para el desarrollo de clases y métodos, Conceptos y temas
Herencia;Mecanismo, clase, atributos, métodos, jerarquia.;Teoríco - Práctico;Se define el concepto de herencia, como la posibilidad existente en el paradigma POO en la cual una clase permite heredar las características (atributos y métodos) de otra clase, permitiendo que se puedan definir nuevas clases basadas de unas ya existentes a fin de reutilizar el código, generando así una jerarquía de clases dentro de una aplicación.;Programación uno;Herencia, Nuevos tópicos para el desarrollo de clases y métodos, Conceptos y temas
Polimorfismo;Clase, atributo, parámetro, declaración, código.;Teoríco - Práctico;Se define el concepto de polimorfismo como la posibilidad existente en el paradigma POO frente a que ciertos lenguajes permitan invocar el mismo método desde diferentes objetos y que cada uno de esos objetos pueda responder a esa invocación de forma distinta.;Programación uno;Polimrfismo, Nuevos tópicos para el desarrollo de clases y métodos, Conceptos y temas 
Sobrecarga de métodos;Declaración, implementación, heredar, código, parámetros.;Teoríco - Práctico;Se define el concepto de sobrecarga de métodos como la posibilidad de tener dos o más funciones con el mismo nombre pero funcionalidad diferente. Es decir, dos o más funciones con el mismo nombre pero que realizan acciones diferentes.;Programación uno;Sobrecarga de métodos, Nuevos tópicos para el desarrollo de clases y métodos, Conceptos y temas
Métodos abstractos;No, aplica;Teoríco - Práctico;Se explica que los métodos abstractos son aquellos métodos que son declarados pero no implementados, es decir, los métodos para los cuales solo se escribe su nombre, parámetros y tipo devuelto pero no su código. ;Programación uno;Métodos abstractos, Clase abstracta, Nuevos tópicos para el desarrollo de clases y métodos, Conceptos y temas
Interface;No, aplica;Teoríco - Práctico;Se definen las interfaces como aquellas clases que son sintácticamente similares a una clase abstracta, en la que puede especificar uno o más métodos que no tienen cuerpo, donde esos métodos deben ser implementados por una clase para que se definan sus acciones. Por lo anterior, una interfaz especifica qué se debe hacer, pero no cómo hacerlo.;Programación uno;Interface, Nuevos tópicos para el desarrollo de clases y métodos, Conceptos y temas
Clase abstracta;No, aplica;Teoríco - Práctico;Se definen las clases abstractas como aquellas que por sí mismas no se pueden identificar con algo concreto, es decir, son algo abstracto, no representan algo específico y se pueden usar para crear otras clases, mas no pueden ser instanciadas. A diferencia de las interfaces si pueden contener métodos no abtractos (es decir con cuerpo), pero deben contener al menos un método abstracto.;Programación uno;Clase abstracta, Nuevos tópicos para el desarrollo de clases y métodos, Conceptos y temas
Representación de la herencia en diagramas;No, aplica;Teórico;Se explica la forma visual (la figura) utilizada para la representación de la herencia en los diagramas de clases. Lo anterior es una continuación lógica tanto del tema de la herencia, como de la profundización en los diagramas UML.;Programación uno;Representación de la herencia en diagramas, Herencia, Nuevos tópicos para el desarrollo de clases y métodos, Conceptos y temas
Algoritmos ;No, aplica;Teoríco - Práctico;Se explica en que consiste un algoritmo tanto de manera conceptual como de forma práctica, se establece la diferencia entre algoritmo y función, y se presentan los primeros algoritmo genéricos o comunmente utilizados en la programación.;Programación uno;Algoritmos, Conceptos y temas
Ordenación;No, aplica;Teoríco - Práctico;Se explican los algoritmos de ordenación como aquellos cuya función es ordenar un conjunto de elementos (normalmente de una lista o un vectos) en función de una relación de orden.;Programación uno;Ordenación, Algoritmos, Conceptos y temas
Búsqueda;No, aplica;Teoríco - Práctico;Se explican los algoritmos de busqueda como aquellos cuya función es buscar un elemento en específico dentro de un conjunto de elementos dados (normalmente una lista o un vector), determinando el elemento correcto en función de un o varias condiciones dadas. En caso de que haya mas de un elemento que cumpla con las condiciones, el algoritmo debería de retornar el primer elemento que cumpla.;Programación uno;Búsqueda, Algoritmos, Conceptos y temas
Selección;No, aplica;Teoríco - Práctico;Se explica o introduce el primer algoritmo de ordenación, enfocado a la ordenación de un conjunto de números, siendo este la ordenación por selección.;Programación uno;Selección, Ordenación, Algoritmos, Conceptos y temas
Burbuja;No, aplica;Teoríco - Práctico;Se explica o introduce el algoritmo de ordenación mas simple (en cuanto a complejidad) de los existentes, enfocado a la ordenación de un conjunto de números, siendo este la ordenación por burbuja.;Programación uno;Burbuja, Ordenación, Algoritmos, Conceptos y temas
Inserción;No, aplica;Teoríco - Práctico;Se explica o introduce el segundo algoritmo de ordenación, enfocado a la ordenación de un conjunto de números, siendo este la ordenación por inserción.;Programación uno;Inserción, Ordenación, Algoritmos, Conceptos y temas
Búsqueda lineal;No, aplica;Teoríco - Práctico;Se explica o introduce el primer algoritmo de búsqueda, el cual sigue el principio natural de revisar, en el orden en que se encuentren, uno a uno cada elemento hasta hallar el primero que satisfaga la o las condiciones dadas.;Programación uno;Búsqueda lineal, Búsqueda, Algoritmos, Conceptos y temas
Búsqueda binaria;No, aplica;Teoríco - Práctico;Se explica o introduce el segundo algoritmo de búsqueda, siendo este el algoritmo de búsqueda binaria.;Programación uno;Búsqueda binaria, Búsqueda, Algoritmos, Conceptos y temas
;;;;;
;;;;;
